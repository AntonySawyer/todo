{"version":3,"sources":["logo.png","components/TaskItem/TaskItem.tsx","utils/generateTask.ts","components/Footer/Footer.tsx","components/Header/Header.tsx","App.tsx","serviceWorker.ts","utils/localStorage.ts","index.tsx","utils/reducer.ts"],"names":["module","exports","__webpack_require__","p","TaskItem","_this","this","liClassName","props","isDone","react","className","id","type","checked","onChange","e","markAsDone","task","onClick","deleteTask","title","editTask","React","generateTask","taskName","Math","random","toFixed","toString","Footer","filter","bind","total","arhive","Header","src","logo","alt","deleteCompleted","sortCompleted","addTask","inputGroup","App","state","isHidden","taskInput","onKeyDown","key","fillInput","content","value","focus","newTask","dispatch","payload","generateNewTask","toHide","archive","document","querySelectorAll","active","forEach","el","classList","remove","add","target","currenTitle","_this2","react_default","a","createElement","placeholder","ref","input","onKeyPress","_this3","components_Header_Header","tasks","map","components_TaskItem_TaskItem","components_Footer_Footer","length","hideTarget","Component","connect","Boolean","window","location","hostname","match","store","createStore","arguments","undefined","action","concat","Object","toConsumableArray","findIndex","sort","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","_unused","saveState","getState","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b7a572b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.91b1ad5b.png\";","import * as React from 'react';\r\nimport * as int from '../../interfaces';\r\nimport './TaskItem.css';\r\n\r\nclass TaskItem extends React.Component<int.ITask> {\r\n    public render() {\r\n        const liClassName: string = this.props.isDone ? 'archive' : 'active';\r\n        return ( \r\n            <li className={liClassName} id={this.props.id}>\r\n                <label className=\"checkContainer\">\r\n                    <input type=\"checkbox\" checked={this.props.isDone} id={this.props.id} \r\n                            onChange={(e) => this.props.markAsDone(this.props.id)} />\r\n                    <span className=\"checkmark\" />\r\n                </label>\r\n\r\n                <span className=\"taskTitle\">{this.props.task}</span>\r\n                <button className=\"taskBtn\" onClick={(e) => this.props.deleteTask(this.props.id)} title=\"Delete task\">×</button>\r\n                <button className=\"taskBtn\" onClick={(e) => this.props.editTask({id: this.props.id, task: this.props.task})} title=\"Edit task\">✎</button>\r\n            </li>\r\n        );\r\n      }\r\n}\r\n\r\nexport default TaskItem;","function getID() {\r\n    return (Math.random()*1000).toFixed(4).toString();\r\n}\r\n\r\nexport default function(taskName: string) {\r\n    if (taskName !== '') {\r\n        return {\r\n            id: getID(),\r\n            isDone: false,\r\n            task: taskName\r\n        }\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as int from '../../interfaces';\r\nimport './Footer.css';\r\n\r\nclass Footer extends React.Component<int.IFooter> {\r\n    render() {\r\n        return ( \r\n            <footer>\r\n                <button onClick={this.props.filter.bind(this, '')} title=\"Show all\">Total = {this.props.total}</button>\r\n                <button onClick={this.props.filter.bind(this, 'archive')} title=\"Show only active\">Active = {this.props.total - this.props.arhive}</button>\r\n                <button onClick={this.props.filter.bind(this, 'active')} title=\"Show only archived\">Archived = {this.props.arhive}</button>\r\n            </footer>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Footer;","import * as React from 'react';\r\nimport logo from '../../logo.png';\r\nimport * as int from '../../interfaces';\r\nimport './Header.css';\r\n\r\n\r\nclass Header extends React.Component<int.IHeader> {\r\n    render() {\r\n        return ( \r\n            <header>\r\n                <img src={logo} alt=\"logo\" className=\"logo\" />\r\n                <h1>ToDo List</h1>\r\n                <div className=\"control\">\r\n                    <button onClick={this.props.deleteCompleted} title=\"Delete marked\">Delete</button>\r\n                    <button onClick={this.props.sortCompleted} title=\"Active to top\">Sort done</button>\r\n                    <button onClick={this.props.addTask} title=\"Add new task\">Add new</button>\r\n                </div>\r\n                {this.props.inputGroup()}\r\n            </header>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport * as int from './interfaces';\nimport TaskItem from './components/TaskItem/TaskItem';\nimport generateNewTask from './utils/generateTask';\nimport Footer from './components/Footer/Footer';\nimport Header from './components/Header/Header';\n\n\nclass App extends Component<int.IAppProps> {\n  state = {\n    isHidden: false\n  }\n\n  taskInput!: HTMLInputElement;\n  addTask() {\n    const newTask = this.taskInput.value;\n    this.fillInput('');\n    newTask && this.props.dispatch({type: 'ADD_TASK', payload: generateNewTask(newTask)});\n  }\n\n  deleteCompleted() {\n    this.props.dispatch({type: 'DELETE_MARKED', payload: ''});\n  }\n\n  sortCompleted() {\n    this.props.dispatch({type: 'SORT_COMPLETED', payload: ''});\n  }\n\n  onKeyDown = (e: any) => {\n    if (e.key === 'Enter') {\n      this.addTask();\n    }\n  }\n\n  hideTarget(toHide: string) {\n    const archive = document.querySelectorAll('.archive');\n    const active = document.querySelectorAll('.active');\n    if (toHide === 'archive') {\n      active.forEach(el => {el.classList.remove('isHidden')});\n      archive.forEach(el => {el.classList.add('isHidden')});\n    } else if (toHide === 'active') {\n      active.forEach(el => {el.classList.add('isHidden')});\n      archive.forEach(el => {el.classList.remove('isHidden')});\n    } else {\n      active.forEach(el => {el.classList.remove('isHidden')});\n      archive.forEach(el => {el.classList.remove('isHidden')});\n    }\n    this.state.isHidden = !this.state.isHidden;\n  }\n\n  fillInput = (content: string) => {this.taskInput.value = content; this.taskInput.focus();};\n\n  deleteTask(id: string) {\n    this.props.dispatch({type: 'DELETE_TASK', payload: id});\n  }\n\n  markAsDone(id: string) {\n    this.props.dispatch({type: 'COMPLETE_TASK', payload: id});\n  }\n\n  editTask(target: {id: string, task: string}) {\n    const currenTitle = target.task;\n    this.fillInput(currenTitle);\n    this.props.dispatch({type: 'DELETE_TASK', payload: target.id});\n  }\n\n  inputGroup () {\n    return (\n      <div className=\"inputGroup\">\n        <input type=\"text\" className=\"taskInput\" placeholder=\"Enter new task ⏎\" \n                ref={(input: HTMLInputElement) => {this.taskInput = input}} \n                onKeyPress={this.onKeyDown} />\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header addTask={this.addTask.bind(this)} \n                deleteCompleted={this.deleteCompleted.bind(this)}\n                sortCompleted={this.sortCompleted.bind(this)} \n                inputGroup={this.inputGroup.bind(this)} />\n        <main>\n \n          <ul>\n            {this.props.tasks.map(el =>\n                <TaskItem key={el.id}\n                  id={el.id}\n                  isDone={el.isDone}\n                  task={el.task} \n                  deleteTask={this.deleteTask.bind(this)}\n                  editTask={this.editTask.bind(this)}\n                  markAsDone={this.markAsDone.bind(this)} />\n              )}\n          </ul>\n        </main>\n        <Footer total={this.props.tasks.length} \n                arhive={this.props.tasks.filter(el => el.isDone).length} \n                filter={this.hideTarget.bind(this)} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: int.ITask[]) => ({\n  tasks: state\n});\n\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as int from '../interfaces';\r\n\r\nexport const loadState = () => {\r\n    try {\r\n      const serializedState = localStorage.getItem('state');\r\n      if (serializedState === null) {\r\n        return undefined;\r\n      }\r\n      return JSON.parse(serializedState);\r\n    } catch (err) {\r\n      return undefined;\r\n    }\r\n  }; \r\n\r\nexport const saveState = (state: int.ITask[]) => {\r\n    try {\r\n      const serializedState = JSON.stringify(state);\r\n      localStorage.setItem('state', serializedState);\r\n    } catch {\r\n      // ignore write errors\r\n    }\r\n  };\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { saveState, loadState } from './utils/localStorage';\nimport Reducer from './utils/reducer';\n\n\nconst store = createStore(Reducer, loadState());\n\nstore.subscribe(() => {\n    saveState(store.getState());\n});\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n","import * as int from '../interfaces';\r\n\r\nexport default function reducer(state: int.ITask[] = [], action: int.IAction) {\r\n    switch (action.type) {\r\n        case 'ADD_TASK':\r\n            return [...state, action.payload];\r\n        break;\r\n        case 'DELETE_TASK':\r\n            return [...state.filter(el => el.id !== action.payload)];\r\n        break;\r\n        case 'COMPLETE_TASK':\r\n            const target = [...state].findIndex(el => el.id === action.payload);\r\n            [...state][target].isDone = ![...state][target].isDone;\r\n            return [...state];\r\n        break;\r\n        case 'SORT_COMPLETED':\r\n            return [...state.sort(el => el.isDone === true ? -1 : 1)];\r\n        break;\r\n        case 'DELETE_MARKED':\r\n            return [...state.filter(el => el.isDone !== true)];\r\n        break;\r\n        default:\r\n            return [...state];\r\n    }\r\n}"],"sourceRoot":""}