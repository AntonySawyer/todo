{"version":3,"sources":["logo.svg","components/Sidebar/Sidebar.tsx","components/TaskItem/TaskItem.tsx","utils/generateTask.ts","components/Footer/Footer.tsx","components/Header/Header.tsx","App.tsx","serviceWorker.ts","utils/localStorage.ts","index.tsx","utils/reducer.ts"],"names":["module","exports","__webpack_require__","p","Sidebar","react","className","React","TaskItem","_this","this","liClassName","props","isDone","concat","favorite","id","type","checked","onChange","e","markAsDone","style","background","color","creationDate","changeStar","task","onClick","deleteTask","title","editTask","generateTask","Date","toLocaleString","day","month","year","Math","random","toFixed","toString","Footer","name","defaultChecked","htmlFor","deleteCompleted","sortCompleted","sortByDate","filter","bind","total","arhive","Header","sideBar","document","querySelectorAll","classList","contains","remove","add","showSideBar","src","logo","alt","inputGroup","App","state","isHidden","taskInput","colorInput","onKeyDown","key","addTask","fillInput","content","value","focus","newTask","newColor","dispatch","payload","generateNewTask","toHide","archive","active","forEach","el","target","_this2","react_default","a","createElement","placeholder","required","pattern","ref","input","onKeyPress","defaultValue","_this3","components_Header_Header","components_Sidebar_Sidebar","tasks","map","components_TaskItem_TaskItem","components_Footer_Footer","length","hideTarget","Component","connect","Boolean","window","location","hostname","match","store","createStore","arguments","undefined","action","Object","toConsumableArray","starTarget","findIndex","doneTarget","sort","b","firstDateArr","split","secondDateArr","firstDate","Number","secondDate","valueOf","serializedState","localStorage","getItem","JSON","parse","err","loadState","subscribe","stringify","setItem","_unused","saveState","getState","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0UCiBzBC,gMAXP,OACIC,EAAA,yBAASC,UAAU,oBACfD,EAAA,wBACIA,EAAA,kCACAA,EAAA,2CANEE,cC8BPC,0LA7BK,IAAAC,EAAAC,KACNC,GAAuBD,KAAKE,MAAMC,OAAS,UAAY,UAAUC,OAAOJ,KAAKE,MAAMG,SAAW,cAAgB,IACpH,OACIV,EAAA,oBAAIC,UAAWK,EAAaK,GAAIN,KAAKE,MAAMI,IACvCX,EAAA,uBAAOC,UAAU,kBACbD,EAAA,uBAAOY,KAAK,WAAWC,QAASR,KAAKE,MAAMC,OAAQG,GAAIN,KAAKE,MAAMI,GAC1DG,SAAU,SAACC,GAAD,OAAOX,EAAKG,MAAMS,WAAWZ,EAAKG,MAAMI,OAC1DX,EAAA,sBAAMC,UAAU,eAEpBD,EAAA,qBAAKC,UAAU,WACXD,EAAA,qBAAKC,UAAU,iBACXD,EAAA,sBAAMC,UAAU,gBAAgBgB,MAAO,CAACC,WAAcb,KAAKE,MAAMY,QAAjE,YACAnB,EAAA,sBAAMC,UAAU,gBAAgBI,KAAKE,MAAMa,cAC3CpB,EAAA,uBAAOY,KAAK,WAAWC,QAASR,KAAKE,MAAMG,SAAUC,GAAIN,KAAKE,MAAMI,GAC5DV,UAAU,WAAWa,SAAU,SAACC,GAAD,OAAOX,EAAKG,MAAMc,WAAWjB,EAAKG,MAAMI,QAEnFX,EAAA,sBAAMC,UAAU,aAAaI,KAAKE,MAAMe,OAE5CtB,EAAA,qBAAKC,UAAU,eACXD,EAAA,wBAAQC,UAAU,UAAUsB,QAAS,SAACR,GAAD,OAAOX,EAAKG,MAAMiB,WAAWpB,EAAKG,MAAMI,KACrEc,MAAM,eADd,QAEAzB,EAAA,wBAAQC,UAAU,UAAUsB,QAAS,SAACR,GAAD,OAAOX,EAAKG,MAAMmB,SAAS,CAACf,GAAIP,EAAKG,MAAMI,GAAIW,KAAMlB,EAAKG,MAAMe,KAAMH,MAAOf,EAAKG,MAAMY,SAC7HM,MAAM,aADN,mBAtBGvB,cCAR,IAAAyB,EAAA,SAASL,GACpB,GAAgB,KAAZA,EAAK,GACL,MAAO,CACHF,cAAc,IAAIQ,MAAOC,eAAe,KAAM,CAAEC,IAAK,UAAWC,MAAO,UAAWC,KAAM,YACxFrB,IAPc,IAAdsB,KAAKC,UAAeC,QAAQ,GAAGC,WAQ/B5B,QAAQ,EACRE,UAAU,EACVS,MAAOG,EAAK,GACZA,KAAMA,EAAK,KCgBRe,0LAtBP,OACIrC,EAAA,4BACQA,EAAA,uBAAOY,KAAK,QAAQ0B,KAAK,YAAY3B,GAAG,aAAaV,UAAU,aAAasC,gBAAc,IAC1FvC,EAAA,uBAAOwC,QAAQ,cAAf,WACAxC,EAAA,uBAAOY,KAAK,QAAQ0B,KAAK,YAAY3B,GAAG,cAAcV,UAAU,gBAChED,EAAA,uBAAOwC,QAAQ,eAAf,YACAxC,EAAA,qBAAKC,UAAU,WACXD,EAAA,wBAAQuB,QAASlB,KAAKE,MAAMkC,gBAAiBhB,MAAM,iBAAnD,UACAzB,EAAA,wBAAQuB,QAASlB,KAAKE,MAAMmC,cAAejB,MAAM,iBAAjD,aACAzB,EAAA,wBAAQuB,QAASlB,KAAKE,MAAMoC,WAAYlB,MAAM,eAA9C,iBAEJzB,EAAA,qBAAKC,UAAU,UACXD,EAAA,wBAAQuB,QAASlB,KAAKE,MAAMqC,OAAOC,KAAKxC,KAAM,IAAKoB,MAAM,YAAzD,UAA2EzB,EAAA,uBAAIK,KAAKE,MAAMuC,OAA1F,KACA9C,EAAA,wBAAQuB,QAASlB,KAAKE,MAAMqC,OAAOC,KAAKxC,KAAM,eAAgBoB,MAAM,YAApE,aAAyFzB,EAAA,uBAAIK,KAAKE,MAAMG,UAAxG,KACAV,EAAA,wBAAQuB,QAASlB,KAAKE,MAAMqC,OAAOC,KAAKxC,KAAM,WAAYoB,MAAM,oBAAhE,WAA2FzB,EAAA,uBAAIK,KAAKE,MAAMuC,MAAQzC,KAAKE,MAAMwC,QAA7H,KACA/C,EAAA,wBAAQuB,QAASlB,KAAKE,MAAMqC,OAAOC,KAAKxC,KAAM,UAAWoB,MAAM,sBAA/D,YAA6FzB,EAAA,uBAAIK,KAAKE,MAAMwC,QAA5G,cAjBH7C,+BCuBN8C,+LAnBP,IAAMC,EAAUC,SAASC,iBAAiB,YAAY,GAClDF,EAAQG,UAAUC,SAAS,YAC3BJ,EAAQG,UAAUE,OAAO,YAEzBL,EAAQG,UAAUG,IAAI,6CAI1B,OACIvD,EAAA,4BACIA,EAAA,wBAAQC,UAAU,UAAUsB,QAASlB,KAAKmD,aAA1C,UACAxD,EAAA,qBAAKyD,IAAKC,IAAMC,IAAI,OAAO1D,UAAU,SACrCD,EAAA,qCACCK,KAAKE,MAAMqD,qBAfP1D,cCKf2D,6MACJC,MAAQ,CACNC,UAAU,KAGZC,mBACAC,oBAwBAC,UAAY,SAACnD,GACG,UAAVA,EAAEoD,KACJ/D,EAAKgE,aAuBTC,UAAY,SAACC,GACXlE,EAAK4D,UAAUO,MAAQD,EAAQ,GAC/BlE,EAAK4D,UAAUQ,QACfpE,EAAK6D,WAAWM,MAAQD,EAAQ,IAAM,oFAjDtC,IAAMG,EAAUpE,KAAK2D,UAAUO,MACzBG,EAAWrE,KAAK4D,WAAWM,MACjClE,KAAKgE,UAAU,CAAC,GAAIK,IACpBD,GAAWpE,KAAKE,MAAMoE,SAAS,CAAC/D,KAAM,WAAYgE,QAASC,EAAgB,CAACJ,EAASC,yCAG5E/D,GACTN,KAAKE,MAAMoE,SAAS,CAAC/D,KAAM,cAAegE,QAASjE,8CAInDN,KAAKE,MAAMoE,SAAS,CAAC/D,KAAM,gBAAiBgE,QAAS,6CAIrDvE,KAAKE,MAAMoE,SAAS,CAAC/D,KAAM,iBAAkBgE,QAAS,0CAGtDvE,KAAKE,MAAMoE,SAAS,CAAC/D,KAAM,eAAgBgE,QAAS,wCAS3CE,GACT,IAAMC,EAAU7B,SAASC,iBAAiB,YACpC6B,EAAS9B,SAASC,iBAAiB,WAC1B,YAAX2B,GACFE,EAAOC,QAAQ,SAAAC,GAAOA,EAAG9B,UAAUE,OAAO,cAC1CyB,EAAQE,QAAQ,SAAAC,GAAOA,EAAG9B,UAAUG,IAAI,eACpB,WAAXuB,GACTE,EAAOC,QAAQ,SAAAC,GAAOA,EAAG9B,UAAUG,IAAI,cACvCwB,EAAQE,QAAQ,SAAAC,GAAOA,EAAG9B,UAAUE,OAAO,eACvB,gBAAXwB,GACTE,EAAOC,QAAQ,SAAAC,GAAOA,EAAG9B,UAAUC,SAAS,cAAgB6B,EAAG9B,UAAUE,OAAO,YAAc4B,EAAG9B,UAAUG,IAAI,cAC/GwB,EAAQE,QAAQ,SAAAC,GAAOA,EAAG9B,UAAUC,SAAS,cAAgB6B,EAAG9B,UAAUE,OAAO,YAAc4B,EAAG9B,UAAUG,IAAI,gBAElHyB,EAAOC,QAAQ,SAAAC,GAAOA,EAAG9B,UAAUE,OAAO,cAC1CyB,EAAQE,QAAQ,SAAAC,GAAOA,EAAG9B,UAAUE,OAAO,eAE7CjD,KAAKyD,MAAMC,UAAY1D,KAAKyD,MAAMC,4CASvBpD,GACTN,KAAKE,MAAMoE,SAAS,CAAC/D,KAAM,cAAegE,QAASjE,uCAG1CA,GACTN,KAAKE,MAAMoE,SAAS,CAAC/D,KAAM,gBAAiBgE,QAASjE,mJAG9CwE,GACP9E,KAAKgE,UAAU,CAACc,EAAO7D,KAAM6D,EAAOhE,QACpCd,KAAKE,MAAMoE,SAAS,CAAC/D,KAAM,cAAegE,QAASO,EAAOxE,2CAG9C,IAAAyE,EAAA/E,KACZ,OACEgF,EAAAC,EAAAC,cAAA,OAAKtF,UAAU,cACboF,EAAAC,EAAAC,cAAA,SAAO3E,KAAK,OAAOX,UAAU,YAAYuF,YAAY,wBAC7CC,UAAQ,EAACC,QAAQ,OACjBC,IAAK,SAACC,GAA6BR,EAAKpB,UAAY4B,GACpDC,WAAYxF,KAAK6D,YACzBmB,EAAAC,EAAAC,cAAA,SAAO3E,KAAK,QAAQX,UAAU,kBAAkB6F,aAAa,UACrDH,IAAK,SAACC,GAA6BR,EAAKnB,WAAa2B,KAC7DP,EAAAC,EAAAC,cAAA,UAAQtF,UAAU,eAAewB,MAAM,eAC/BF,QAASlB,KAAK+D,QAAQvB,KAAKxC,OADnC,yCAMG,IAAA0F,EAAA1F,KACP,OACEgF,EAAAC,EAAAC,cAAA,OAAKtF,UAAU,OACboF,EAAAC,EAAAC,cAACS,EAAD,CAAQpC,WAAYvD,KAAKuD,WAAWf,KAAKxC,QACzCgF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAAA,UACGlF,KAAKE,MAAM2F,MAAMC,IAAI,SAAAjB,GAAE,OACpBG,EAAAC,EAAAC,cAACa,EAAD,CAAUjC,IAAKe,EAAGvE,GAChBA,GAAIuE,EAAGvE,GACPH,OAAQ0E,EAAG1E,OACXE,SAAUwE,EAAGxE,SACbS,MAAO+D,EAAG/D,MACVG,KAAM4D,EAAG5D,KACTF,aAAc8D,EAAG9D,aACjBI,WAAYuE,EAAKvE,WAAWqB,KAAKkD,GACjCrE,SAAUqE,EAAKrE,SAASmB,KAAKkD,GAC7B/E,WAAY+E,EAAK/E,WAAW6B,KAAKkD,GACjC1E,WAAY0E,EAAK1E,WAAWwB,KAAKkD,SAI3CV,EAAAC,EAAAC,cAACc,EAAD,CAAQvD,MAAOzC,KAAKE,MAAM2F,MAAMI,OACxBvD,OAAQ1C,KAAKE,MAAM2F,MAAMtD,OAAO,SAAAsC,GAAE,OAAIA,EAAG1E,SAAQ8F,OACjD5F,SAAUL,KAAKE,MAAM2F,MAAMtD,OAAO,SAAAsC,GAAE,OAAIA,EAAGxE,WAAU4F,OACrD1D,OAAQvC,KAAKkG,WAAW1D,KAAKxC,MAC7BoC,gBAAiBpC,KAAKoC,gBAAgBI,KAAKxC,MAC3CqC,cAAerC,KAAKqC,cAAcG,KAAKxC,MACvCsC,WAAYtC,KAAKsC,WAAWE,KAAKxC,gBArH/BmG,aAgIHC,cALS,SAAC3C,GAAD,MAAyB,CAC/CoC,MAAOpC,IAIM2C,CAAyB5C,GC/HpB6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBC,WCSP,IAAMC,EAAQC,YCTC,WAA+D,IAA9ClD,EAA8CmD,UAAAX,OAAA,QAAAY,IAAAD,UAAA,GAAAA,UAAA,GAAzB,GAAIE,EAAqBF,UAAAX,OAAA,EAAAW,UAAA,QAAAC,EAC1E,OAAQC,EAAOvG,MACX,IAAK,WACD,SAAAH,OAAA2G,OAAAC,EAAA,EAAAD,CAAWtD,GAAX,CAAkBqD,EAAOvC,UAE7B,IAAK,cACL,IAAM0C,EAAaF,OAAAC,EAAA,EAAAD,CAAItD,GAAOyD,UAAU,SAAArC,GAAE,OAAIA,EAAGvE,KAAOwG,EAAOvC,UAE/D,OADAwC,OAAAC,EAAA,EAAAD,CAAItD,GAAOwD,GAAY5G,UAAY0G,OAAAC,EAAA,EAAAD,CAAItD,GAAOwD,GAAY5G,SACnD0G,OAAAC,EAAA,EAAAD,CAAItD,GAEX,IAAK,cACD,OAAOsD,OAAAC,EAAA,EAAAD,CAAItD,EAAMlB,OAAO,SAAAsC,GAAE,OAAIA,EAAGvE,KAAOwG,EAAOvC,WAEnD,IAAK,gBACD,IAAM4C,EAAaJ,OAAAC,EAAA,EAAAD,CAAItD,GAAOyD,UAAU,SAAArC,GAAE,OAAIA,EAAGvE,KAAOwG,EAAOvC,UAE/D,OADAwC,OAAAC,EAAA,EAAAD,CAAItD,GAAO0D,GAAYhH,QAAU4G,OAAAC,EAAA,EAAAD,CAAItD,GAAO0D,GAAYhH,OACjD4G,OAAAC,EAAA,EAAAD,CAAItD,GAEf,IAAK,iBACD,OAAOsD,OAAAC,EAAA,EAAAD,CAAItD,EAAM2D,KAAK,SAAAvC,GAAE,OAAkB,IAAdA,EAAG1E,QAAmB,EAAI,KAE1D,IAAK,eACD,OAAO4G,OAAAC,EAAA,EAAAD,CAAItD,EAAM2D,KAAK,SAACnC,EAAEoC,GACrB,IAAMC,EAAwBrC,EAAElE,aAAagB,WAAWwF,MAAM,KACxDC,EAAyBH,EAAEtG,aAAagB,WAAWwF,MAAM,KACzDE,EAAY,IAAIlG,KAAKmG,OAAOJ,EAAa,IAAKI,OAAOJ,EAAa,IAAKI,OAAOJ,EAAa,KAC3FK,EAAa,IAAIpG,KAAKmG,OAAOF,EAAc,IAAKE,OAAOF,EAAc,IAAKE,OAAOF,EAAc,KACrG,OAAOC,EAAUG,WAAaD,EAAWC,UAAY,GAAK,KAGlE,IAAK,gBACD,OAAOb,OAAAC,EAAA,EAAAD,CAAItD,EAAMlB,OAAO,SAAAsC,GAAE,OAAkB,IAAdA,EAAG1E,UAErC,QACI,OAAO4G,OAAAC,EAAA,EAAAD,CAAItD,KFlCE,WACrB,IACE,IAAMoE,EAAkBC,aAAaC,QAAQ,iBAC7C,GAAwB,OAApBF,EACF,OAEF,OAAOG,KAAKC,MAAMJ,GAClB,MAAOK,GACP,QCC6BC,IAEnCzB,EAAM0B,UAAU,YDCS,SAAC3E,GACtB,IACE,IAAMoE,EAAkBG,KAAKK,UAAU5E,GACvCqE,aAAaQ,QAAQ,gBAAiBT,GACtC,MAAAU,KCJFC,CAAU9B,EAAM+B,cAGpBC,IAASC,OACL3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAUlC,MAAOA,GACb1B,EAAAC,EAAAC,cAAC2D,EAAD,OAEFhG,SAASiG,eAAe,SFoHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9fc88743.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.bfea3f98.svg\";","import * as React from 'react';\r\nimport './Sidebar.css';\r\n\r\n\r\nclass Sidebar extends React.Component {\r\n    render() {\r\n        return ( \r\n            <section className=\"sideBar isHidden\">\r\n                <ul>\r\n                    <li>test 1</li>\r\n                    <li>test 2</li>\r\n                </ul>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sidebar;","import * as React from 'react';\r\nimport * as int from '../../interfaces';\r\nimport './TaskItem.css';\r\n\r\nclass TaskItem extends React.Component<int.ITask> {\r\n    public render() {\r\n        const liClassName: string = (this.props.isDone ? 'archive' : 'active').concat(this.props.favorite ? ' isFavorite' : '');\r\n        return ( \r\n            <li className={liClassName} id={this.props.id}>\r\n                <label className=\"checkContainer\">\r\n                    <input type=\"checkbox\" checked={this.props.isDone} id={this.props.id} \r\n                            onChange={(e) => this.props.markAsDone(this.props.id)} />\r\n                    <span className=\"checkmark\" />\r\n                </label>\r\n                <div className=\"taskBox\">\r\n                    <div className=\"taskInfoGroup\">\r\n                        <span className=\"taskColorMark\" style={{'background': this.props.color}}>category</span>\r\n                        <span className=\"creationDate\">{this.props.creationDate}</span>\r\n                        <input type=\"checkbox\" checked={this.props.favorite} id={this.props.id} \r\n                                className=\"favorite\" onChange={(e) => this.props.changeStar(this.props.id)} />                        \r\n                    </div>\r\n                    <span className=\"taskTitle\">{this.props.task}</span>                \r\n                </div>\r\n                <div className=\"taskControl\">\r\n                    <button className=\"taskBtn\" onClick={(e) => this.props.deleteTask(this.props.id)} \r\n                            title=\"Delete task\">×</button>\r\n                    <button className=\"taskBtn\" onClick={(e) => this.props.editTask({id: this.props.id, task: this.props.task, color: this.props.color})}\r\n                    title=\"Edit task\">✍</button>\r\n                </div>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskItem;","function getID() {\r\n    return (Math.random()*1000).toFixed(4).toString();\r\n}\r\n\r\nexport default function(task: string[]) {\r\n    if (task[0] !== '') {\r\n        return {\r\n            creationDate: new Date().toLocaleString('ru', { day: 'numeric', month: 'numeric', year: 'numeric' }),\r\n            id: getID(),\r\n            isDone: false,\r\n            favorite: false,\r\n            color: task[1],\r\n            task: task[0]\r\n        }\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport * as int from '../../interfaces';\r\nimport './Footer.css';\r\n\r\nclass Footer extends React.Component<int.IFooter> {\r\n    render() {\r\n        return ( \r\n            <footer>\r\n                    <input type=\"radio\" name=\"menuRadio\" id=\"showViewed\" className=\"showViewed\" defaultChecked />\r\n                    <label htmlFor=\"showViewed\">Filters</label>\r\n                    <input type=\"radio\" name=\"menuRadio\" id=\"showControl\" className=\"showControl\" />\r\n                    <label htmlFor=\"showControl\">Controls</label>\r\n                    <div className=\"control\">\r\n                        <button onClick={this.props.deleteCompleted} title=\"Delete marked\">Delete</button>\r\n                        <button onClick={this.props.sortCompleted} title=\"Active to top\">Sort done</button>\r\n                        <button onClick={this.props.sortByDate} title=\"First fresh\">Sort by date</button>\r\n                    </div>\r\n                    <div className=\"viewed\">\r\n                        <button onClick={this.props.filter.bind(this, '')} title=\"Show all\">Total (<b>{this.props.total}</b>)</button>\r\n                        <button onClick={this.props.filter.bind(this, 'notFavorite')} title=\"Favorite\">Favorite (<b>{this.props.favorite}</b>)</button>\r\n                        <button onClick={this.props.filter.bind(this, 'archive')} title=\"Show only active\">Active (<b>{this.props.total - this.props.arhive}</b>)</button>\r\n                        <button onClick={this.props.filter.bind(this, 'active')} title=\"Show only archived\">Archive (<b>{this.props.arhive}</b>)</button>\r\n                    </div>\r\n            </footer>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Footer;","import * as React from 'react';\r\nimport logo from '../../logo.svg';\r\nimport * as int from '../../interfaces';\r\nimport './Header.css';\r\n\r\n\r\nclass Header extends React.Component<int.IHeader> {\r\n    showSideBar() {\r\n        const sideBar = document.querySelectorAll('.sideBar')[0];\r\n        if (sideBar.classList.contains('isHidden')) {\r\n            sideBar.classList.remove('isHidden');\r\n        } else {\r\n            sideBar.classList.add('isHidden');\r\n        }\r\n    }\r\n    render() {\r\n        return ( \r\n            <header>\r\n                <button className=\"menuBar\" onClick={this.showSideBar}>☰</button>\r\n                <img src={logo} alt=\"logo\" className=\"logo\" />\r\n                <h1>ToDo List</h1>\r\n                {this.props.inputGroup()}\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport * as int from './interfaces';\r\nimport Sidebar from './components/Sidebar/Sidebar';\r\nimport TaskItem from './components/TaskItem/TaskItem';\r\nimport generateNewTask from './utils/generateTask';\r\nimport Footer from './components/Footer/Footer';\r\nimport Header from './components/Header/Header';\r\n\r\n\r\nclass App extends Component<int.IAppProps> {\r\n  state = {\r\n    isHidden: false\r\n  }\r\n\r\n  taskInput!: HTMLInputElement;\r\n  colorInput!: HTMLInputElement;\r\n\r\n  addTask() {\r\n    const newTask = this.taskInput.value;\r\n    const newColor = this.colorInput.value;\r\n    this.fillInput(['', newColor]);\r\n    newTask && this.props.dispatch({type: 'ADD_TASK', payload: generateNewTask([newTask, newColor])});\r\n  }\r\n\r\n  changeStar(id: string) {\r\n    this.props.dispatch({type: 'CHANGE_STAR', payload: id});\r\n  }\r\n\r\n  deleteCompleted() {\r\n    this.props.dispatch({type: 'DELETE_MARKED', payload: ''});\r\n  }\r\n\r\n  sortCompleted() {\r\n    this.props.dispatch({type: 'SORT_COMPLETED', payload: ''});\r\n  }\r\n  sortByDate() {\r\n    this.props.dispatch({type: 'SORT_BY_DATE', payload: ''});\r\n  }\r\n\r\n  onKeyDown = (e: any) => {\r\n    if (e.key === 'Enter') {\r\n      this.addTask();\r\n    }\r\n  }\r\n\r\n  hideTarget(toHide: string) {\r\n    const archive = document.querySelectorAll('.archive');\r\n    const active = document.querySelectorAll('.active');\r\n    if (toHide === 'archive') {\r\n      active.forEach(el => {el.classList.remove('isHidden')});\r\n      archive.forEach(el => {el.classList.add('isHidden')});\r\n    } else if (toHide === 'active') {\r\n      active.forEach(el => {el.classList.add('isHidden')});\r\n      archive.forEach(el => {el.classList.remove('isHidden')});\r\n    } else if (toHide === 'notFavorite') {\r\n      active.forEach(el => {el.classList.contains('isFavorite') ? el.classList.remove('isHidden') : el.classList.add('isHidden')});\r\n      archive.forEach(el => {el.classList.contains('isFavorite') ? el.classList.remove('isHidden') : el.classList.add('isHidden')});\r\n    } else {\r\n    active.forEach(el => {el.classList.remove('isHidden')});\r\n    archive.forEach(el => {el.classList.remove('isHidden')});\r\n  }\r\n  this.state.isHidden = !this.state.isHidden;\r\n  }\r\n\r\n  fillInput = (content: string[]) => {\r\n    this.taskInput.value = content[0];\r\n    this.taskInput.focus();\r\n    this.colorInput.value = content[1] || \"#62bfbf\";\r\n  };\r\n\r\n  deleteTask(id: string) {\r\n    this.props.dispatch({type: 'DELETE_TASK', payload: id});\r\n  }\r\n\r\n  markAsDone(id: string) {\r\n    this.props.dispatch({type: 'COMPLETE_TASK', payload: id});\r\n  }\r\n\r\n  editTask(target: int.editTask) {\r\n    this.fillInput([target.task, target.color]);\r\n    this.props.dispatch({type: 'DELETE_TASK', payload: target.id});\r\n  }\r\n\r\n  inputGroup () {\r\n    return (\r\n      <div className=\"inputGroup\">\r\n        <input type=\"text\" className=\"taskInput\" placeholder=\"Enter new task ⏎\" \r\n                required pattern=\"\\S+\"\r\n                ref={(input: HTMLInputElement) => {this.taskInput = input}} \r\n                onKeyPress={this.onKeyDown} />\r\n        <input type=\"color\" className=\"taskColorPicker\" defaultValue=\"#62bfbf\"\r\n                ref={(input: HTMLInputElement) => {this.colorInput = input}} />\r\n        <button className=\"taskInputBtn\" title=\"Add new task\"\r\n                onClick={this.addTask.bind(this)}>Add</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header inputGroup={this.inputGroup.bind(this)} />\r\n        <main>\r\n          <Sidebar />\r\n          <ul>\r\n            {this.props.tasks.map(el =>\r\n                <TaskItem key={el.id}\r\n                  id={el.id}\r\n                  isDone={el.isDone}\r\n                  favorite={el.favorite}\r\n                  color={el.color}\r\n                  task={el.task} \r\n                  creationDate={el.creationDate}\r\n                  deleteTask={this.deleteTask.bind(this)}\r\n                  editTask={this.editTask.bind(this)}\r\n                  markAsDone={this.markAsDone.bind(this)} \r\n                  changeStar={this.changeStar.bind(this)} />\r\n              )}\r\n          </ul>\r\n        </main>\r\n        <Footer total={this.props.tasks.length} \r\n                arhive={this.props.tasks.filter(el => el.isDone).length} \r\n                favorite={this.props.tasks.filter(el => el.favorite).length} \r\n                filter={this.hideTarget.bind(this)} \r\n                deleteCompleted={this.deleteCompleted.bind(this)}\r\n                sortCompleted={this.sortCompleted.bind(this)} \r\n                sortByDate={this.sortByDate.bind(this)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: int.ITask[]) => ({\r\n  tasks: state\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as int from '../interfaces';\r\n\r\nexport const loadState = () => {\r\n    try {\r\n      const serializedState = localStorage.getItem('todoListState');\r\n      if (serializedState === null) {\r\n        return undefined;\r\n      }\r\n      return JSON.parse(serializedState);\r\n    } catch (err) {\r\n      return undefined;\r\n    }\r\n  };\r\n\r\nexport const saveState = (state: int.ITask[]) => {\r\n    try {\r\n      const serializedState = JSON.stringify(state);\r\n      localStorage.setItem('todoListState', serializedState);\r\n    } catch {\r\n      // ignore write errors\r\n    }\r\n  };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { saveState, loadState } from './utils/localStorage';\r\nimport Reducer from './utils/reducer';\r\n\r\n\r\nconst store = createStore(Reducer, loadState());\r\n\r\nstore.subscribe(() => {\r\n    saveState(store.getState());\r\n});\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","import * as int from '../interfaces';\r\n\r\nexport default function reducer(state: int.ITask[] = [], action: int.IAction) {\r\n    switch (action.type) {\r\n        case 'ADD_TASK':\r\n            return [...state, action.payload];\r\n        break;\r\n        case 'CHANGE_STAR':\r\n        const starTarget = [...state].findIndex(el => el.id === action.payload);\r\n        [...state][starTarget].favorite = ![...state][starTarget].favorite;\r\n        return [...state];\r\n        break;\r\n        case 'DELETE_TASK':\r\n            return [...state.filter(el => el.id !== action.payload)];\r\n        break;\r\n        case 'COMPLETE_TASK':\r\n            const doneTarget = [...state].findIndex(el => el.id === action.payload);\r\n            [...state][doneTarget].isDone = ![...state][doneTarget].isDone;\r\n            return [...state];\r\n        break;\r\n        case 'SORT_COMPLETED':\r\n            return [...state.sort(el => el.isDone === true ? -1 : 1)];\r\n        break;\r\n        case 'SORT_BY_DATE':\r\n            return [...state.sort((a,b) => {\r\n                const firstDateArr:string[] = a.creationDate.toString().split('.');\r\n                const secondDateArr:string[] = b.creationDate.toString().split('.');\r\n                const firstDate = new Date(Number(firstDateArr[1]), Number(firstDateArr[0]), Number(firstDateArr[2]));\r\n                const secondDate = new Date(Number(secondDateArr[1]), Number(secondDateArr[0]), Number(secondDateArr[2]));\r\n                return firstDate.valueOf() >= secondDate.valueOf() ? 1 : -1;\r\n            })];\r\n        break;\r\n        case 'DELETE_MARKED':\r\n            return [...state.filter(el => el.isDone !== true)];\r\n        break;\r\n        default:\r\n            return [...state];\r\n    }\r\n}"],"sourceRoot":""}